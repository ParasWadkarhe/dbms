To accomplish these tasks using MongoDB, first, we need to create a database called DYPIT and then create the Teachers and Students collections. I will provide the MongoDB commands for each task as per the requirements.

Step 1: Create Database DYPIT
javascript
Copy code
use DYPIT
This command creates and switches to the DYPIT database.

Step 2: Create Collections
javascript
Copy code
// Create Teachers collection
db.createCollection("Teachers")

// Create Students collection
db.createCollection("Students")
Step 3: Insert Sample Data
Before running the queries, we need to insert some sample data into the collections.

Teachers Collection:
javascript
Copy code
db.Teachers.insertMany([
  { Tname: "Praveen", dno: 101, dname: "Computer", experience: 5, salary: 12000, date_of_joining: new Date("2018-01-15") },
  { Tname: "Rajesh", dno: 102, dname: "IT", experience: 8, salary: 9000, date_of_joining: new Date("2015-06-10") },
  { Tname: "Amit", dno: 103, dname: "E&TC", experience: 6, salary: 11000, date_of_joining: new Date("2017-08-01") },
  { Tname: "Sujay", dno: 104, dname: "Computer", experience: 4, salary: 9500, date_of_joining: new Date("2019-11-22") },
  { Tname: "Neha", dno: 105, dname: "IT", experience: 7, salary: 10500, date_of_joining: new Date("2016-03-14") },
  { Tname: "Karan", dno: 106, dname: "Computer", experience: 3, salary: 13000, date_of_joining: new Date("2020-05-05") }
])
Students Collection:
javascript
Copy code
db.Students.insertMany([
  { Sname: "John", roll_no: 1, class: "X" },
  { Sname: "Sara", roll_no: 2, class: "XII" },
  { Sname: "xyz", roll_no: 3, class: "XI" }
])
Step 4: Queries
1. Find the information about all teachers:
javascript
Copy code
db.Teachers.find()
This query retrieves all documents in the Teachers collection.

2. Find the information about all teachers of the computer department:
javascript
Copy code
db.Teachers.find({ dname: "Computer" })
This query finds all teachers whose department (dname) is "Computer".

3. Find the information about all teachers of Computer, IT, and E&TC departments:
javascript
Copy code
db.Teachers.find({ dname: { $in: ["Computer", "IT", "E&TC"] } })
This query finds all teachers whose department (dname) is either "Computer", "IT", or "E&TC".

4. Find the information about all teachers of Computer, IT, and E&TC departments having salary greater than or equal to 10000:
javascript
Copy code
db.Teachers.find({
  dname: { $in: ["Computer", "IT", "E&TC"] },
  salary: { $gte: 10000 }
})
This query finds all teachers in the specified departments and having a salary greater than or equal to Rs. 10,000.

5. Find the student information having roll_no = 2 or Sname = xyz:
javascript
Copy code
db.Students.find({ $or: [{ roll_no: 2 }, { Sname: "xyz" }] })
This query retrieves the student documents where either roll_no is 2 or Sname is "xyz".

6. Update the experience of teacher Praveen to 10 years, if the entry is not available in the database, consider the entry as new entry:
javascript
Copy code
db.Teachers.update(
  { Tname: "Praveen" },
  { $set: { experience: 10 } },
  { upsert: true }
)
This query updates the experience of "Praveen" to 10 years. If Praveen does not exist in the collection, it inserts a new document.

7. Update the department of all teachers working in the IT department to COMP:
javascript
Copy code
db.Teachers.update(
  { dname: "IT" },
  { $set: { dname: "COMP" } },
  { multi: true }
)
This query updates the dname (department) field for all teachers in the IT department to "COMP".

8. Find the teacher's name and their experience from the Teachers collection:
javascript
Copy code
db.Teachers.find({}, { Tname: 1, experience: 1 })
This query retrieves the names (Tname) and experience of all teachers from the Teachers collection.

9. Using save() method insert one entry in the department collection:
First, create the Department collection:

javascript
Copy code
db.createCollection("Department")
Then, use the save() method to insert one entry:

javascript
Copy code
db.Department.save({ dno: 107, dname: "Mechanical" })
This query inserts a new department document into the Department collection.

10. Using save() method change the dept of teacher Rajesh to IT:
javascript
Copy code
db.Teachers.save({
  Tname: "Rajesh",
  dno: 102,
  dname: "IT",
  experience: 8,
  salary: 9000,
  date_of_joining: new Date("2015-06-10")
})
This query updates or inserts the document for "Rajesh" with department "IT" using the save() method.

11. Delete all the documents from the Teachers collection having IT dept:
javascript
Copy code
db.Teachers.remove({ dname: "IT" })
This query deletes all teacher documents in the "IT" department.

12. Display the first 3 documents in the Teachers collection in ascending order using pretty():
javascript
Copy code
db.Teachers.find().sort({ date_of_joining: 1 }).limit(3).pretty()
This query retrieves the first 3 documents sorted by the date_of_joining field in ascending order, displaying the output in a pretty format.

Summary
We created the DYPIT database and Teachers and Students collections.
Various MongoDB queries are provided to retrieve, update, delete, and insert data into the collections, including using the save() method and handling specific tasks like salary updates, department changes, and fine calculations.