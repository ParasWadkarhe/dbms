Here’s how you can implement the required operations in MongoDB. Each operation will involve using MongoDB commands for querying and indexing, and I'll guide you through the specific requirements.

Step 1: Create the Database and Collections
First, ensure you have created the DYPIT database and the required collections (Teachers and Students).

javascript
Copy code
use DYPIT // Creates and switches to the DYPIT database
Create Collections:
javascript
Copy code
db.createCollection("Teachers")
db.createCollection("Students")
Insert Sample Data:
javascript
Copy code
// Teachers Collection
db.Teachers.insertMany([
  { Tname: "Praveen", dno: 101, dname: "Computer", experience: 5, salary: 12000, date_of_joining: new Date("2018-01-15") },
  { Tname: "Rajesh", dno: 102, dname: "IT", experience: 8, salary: 9000, date_of_joining: new Date("2015-06-10") },
  { Tname: "Amit", dno: 103, dname: "E&TC", experience: 6, salary: 11000, date_of_joining: new Date("2017-08-01") },
  { Tname: "Sujay", dno: 104, dname: "Computer", experience: 4, salary: 9500, date_of_joining: new Date("2019-11-22") },
  { Tname: "Neha", dno: 105, dname: "IT", experience: 7, salary: 10500, date_of_joining: new Date("2016-03-14") },
  { Tname: "Karan", dno: 106, dname: "Computer", experience: 3, salary: 13000, date_of_joining: new Date("2020-05-05") }
])

// Students Collection
db.Students.insertMany([
  { Sname: "John", roll_no: 1, class: "X" },
  { Sname: "Sara", roll_no: 25, class: "XII" },
  { Sname: "xyz", roll_no: 3, class: "XI" }
])
Step 2: Operations
1. Display the Department-Wise Average Salary
To calculate the average salary of teachers by department, you can use the aggregation framework:

javascript
Copy code
db.Teachers.aggregate([
  { $group: { _id: "$dname", avgSalary: { $avg: "$salary" } } }
])
2. Display the Number of Employees Working in Each Department
To find out how many employees (teachers) are working in each department, use:

javascript
Copy code
db.Teachers.aggregate([
  { $group: { _id: "$dname", totalEmployees: { $sum: 1 } } }
])
3. Display the Department-Wise Total Salary for Departments Having Total Salary Greater Than or Equal to 50,000
To calculate the total salary for each department and filter those with a total salary >= 50,000:

javascript
Copy code
db.Teachers.aggregate([
  { $group: { _id: "$dname", totalSalary: { $sum: "$salary" } } },
  { $match: { totalSalary: { $gte: 50000 } } }
])
4. Write Queries Using Different Operators Like max, min, etc.
To demonstrate the use of operators like max, min, and others, here are a few examples:

Maximum Salary:

javascript
Copy code
db.Teachers.aggregate([
  { $group: { _id: "$dname", maxSalary: { $max: "$salary" } } }
])
Minimum Salary:

javascript
Copy code
db.Teachers.aggregate([
  { $group: { _id: "$dname", minSalary: { $min: "$salary" } } }
])
Average Experience:

javascript
Copy code
db.Teachers.aggregate([
  { $group: { _id: "$dname", avgExperience: { $avg: "$experience" } } }
])
5. Create a Unique Index on Any Field for the Collections
Let’s create a unique index on the roll_no field in the Students collection:

javascript
Copy code
db.Students.createIndex({ roll_no: 1 }, { unique: true })
This ensures that the roll_no field will have unique values.

6. Create a Compound Index on Any Fields for the Collections
Now, let’s create a compound index on the dname and salary fields in the Teachers collection:

javascript
Copy code
db.Teachers.createIndex({ dname: 1, salary: -1 })
This index will help improve performance for queries filtering by department (dname) and sorting by salary in descending order.

7. Show All the Indexes Created in the DYPIT Database
To show all the indexes created in the DYPIT database:

javascript
Copy code
db.getCollectionNames() // List all collections in the DYPIT database
After selecting the collection, you can use:

javascript
Copy code
db.Teachers.getIndexes() // To view indexes in the Teachers collection
db.Students.getIndexes() // To view indexes in the Students collection
This will display all the indexes created for the specific collection.

8. Show All the Indexes Created in the Above Collections
To list the indexes in the Teachers and Students collections, use the following commands:

javascript
Copy code
db.Teachers.getIndexes() // Show indexes in the Teachers collection
db.Students.getIndexes() // Show indexes in the Students collection
Summary of MongoDB Operations:
Department-wise Average Salary:

javascript
Copy code
db.Teachers.aggregate([{ $group: { _id: "$dname", avgSalary: { $avg: "$salary" } } }])
Number of Employees per Department:

javascript
Copy code
db.Teachers.aggregate([{ $group: { _id: "$dname", totalEmployees: { $sum: 1 } } }])
Department-wise Total Salary with Filter:

javascript
Copy code
db.Teachers.aggregate([{ $group: { _id: "$dname", totalSalary: { $sum: "$salary" } } }, { $match: { totalSalary: { $gte: 50000 } } }])
Queries with Max, Min, Average:

Max Salary:
javascript
Copy code
db.Teachers.aggregate([{ $group: { _id: "$dname", maxSalary: { $max: "$salary" } } }])
Min Salary:
javascript
Copy code
db.Teachers.aggregate([{ $group: { _id: "$dname", minSalary: { $min: "$salary" } } }])
Create Unique Index on roll_no:

javascript
Copy code
db.Students.createIndex({ roll_no: 1 }, { unique: true })
Create Compound Index on dname and salary:

javascript
Copy code
db.Teachers.createIndex({ dname: 1, salary: -1 })
Show All Indexes in the Database:

javascript
Copy code
db.Teachers.getIndexes() // Teachers collection indexes
db.Students.getIndexes() // Students collection indexes